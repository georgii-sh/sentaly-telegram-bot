// Code generated by MockGen. DO NOT EDIT.
// Source: ports/botservice.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
	ports "sentaly.com/telegram-bot/ports"
)

// MockBotService is a mock of BotService interface
type MockBotService struct {
	ctrl     *gomock.Controller
	recorder *MockBotServiceMockRecorder
}

// MockBotServiceMockRecorder is the mock recorder for MockBotService
type MockBotServiceMockRecorder struct {
	mock *MockBotService
}

// NewMockBotService creates a new mock instance
func NewMockBotService(ctrl *gomock.Controller) *MockBotService {
	mock := &MockBotService{ctrl: ctrl}
	mock.recorder = &MockBotServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBotService) EXPECT() *MockBotServiceMockRecorder {
	return m.recorder
}

// ParseRequest mocks base method
func (m *MockBotService) ParseRequest(r io.ReadCloser) (*ports.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRequest", r)
	ret0, _ := ret[0].(*ports.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRequest indicates an expected call of ParseRequest
func (mr *MockBotServiceMockRecorder) ParseRequest(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRequest", reflect.TypeOf((*MockBotService)(nil).ParseRequest), r)
}

// ProcessRequest mocks base method
func (m *MockBotService) ProcessRequest(u *ports.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRequest", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRequest indicates an expected call of ProcessRequest
func (mr *MockBotServiceMockRecorder) ProcessRequest(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRequest", reflect.TypeOf((*MockBotService)(nil).ProcessRequest), u)
}
